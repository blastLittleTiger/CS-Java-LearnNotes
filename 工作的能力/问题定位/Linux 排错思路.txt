1.Linux 排错思路
	1: TOP 命令 (查看整机) 如果不停的按1 ,可以查看CPU每个核的负载情况,load average 的含义  3个值分别代表 系统 1分钟,5分钟,15分钟 的负载情况,如果三个值加起来除 3 乘 1000%  大于60% ,这个时候 表示系统负载严重.  uptime  为 top 命令的精简版 
	
	2.cpu vmstat -n 2 3   表示每两秒采样一次,共采用三次    主要用来查看cpu   procs 
		procs 查看 r 和 b  r表示 runtime   b 表示 blocking 
			r : 运行和等待cpu时间片的进程数,原则上1核的cpu运行队列不要超过2,整个系统的运行队列不能超过总核数的2倍,否则代表系统压力过大.
			b : 等待资源进程数,比如正在等待的磁盘I/O  网络I/O 等.
		
		cpu :
			us : 用户进程消耗CPU时间的百分比,us值高,用户进程消耗CPU时间多,如果长期大于50%,优化程序;
			sy : 内核进程消耗的CPU时间百分比;
			us + sy 参考值为80%,如果us + sy 大于80% ,说明可能存在cpu不足.
			id : 处于空闲的CPU百分比
			wa: 系统等待IO的CPU时间百分比
			st:来自于一个虚拟机偷取的CPU时间的百分比
	查看所有cpu核信息  mpstat -P ALL 2   每两秒采样一次  打印所有CPU 的信息
	每个进程使用CPU的用量分解信息  pidstat -u 1 -p 进程编号 
	
	3.内存 : free     free -m  (按M单位来 一般用这个)  free -g (按G 来计算)
		查看额外 : pidstat -p 进程号 -r 采样间隔秒数 
		
	4.硬盘  df -h  (h 是human的意思,就是用人类能看懂的方式)
	
	5.磁盘IO: iostat
		磁盘评估   : iostat -xdk 2 3  (每两秒采样一次,共三次)
		查看额外   : pidstat -d 采样间隔秒数 -p 进程号 
	6.网络IO: ifstat  
	
	
	cpu占用过高的定位分析思路:
		1: top  查查 cpu占用过高的进程
		2: ps -ef 或者jps 进一步定位,得知是一个怎么样的一个后天程序给我们惹事
		3: 定位到具体线程或者代码
			ps -mp 进程 -o THREAD,tid,time (-m 显示所有的线程  -p pid  进程使用cpu的时间, -o 该参数后是用户自定义格式)  printf "%x\n" 线程ID
		4: 将需要的线程ID 转换为16进制格式(英文小写格式)
		5: jstack 进程ID | grep tid(16进制线程ID 小写英文) -A60 
		
		 
		
github 操作:
		搜寻springboot 为例
		1:  springboot in:name,description,readme
		2:  springboot stats:>5000 forks:>2000  或者  springboot forks:2000..4000  stars:6000..8000
		3: awesome springboot
		4:#L   高亮显示某行 在URL 地址后面加  或者 #L20-L30  高亮显示 20到30行
		5: T  搜索
		6: 搜索区域活跃用户 : 如 : location:beijing language:java
		
		
		
	
	
	
	